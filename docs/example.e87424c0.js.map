{"version":3,"sources":["../index.js","../index.vert.glsl","../uv-ndc.vert.glsl","../uv-texture.vert.glsl","../index.frag.glsl","../uv.frag.glsl","index.js"],"names":["positions","vertices","count","length","dim","flat","module","exports","shader","regl","drawScreenTriangle","vert","prop","frag","attributes","position","uniforms","width","context","height","clear","color","depth","stencil","shaders","name","vertNDC","fragUV","vertST","frame","t","tick","poll","s","console","log","draw","document","addEventListener"],"mappings":";;;;;AAsBeA,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,QAAAA,QAAAA,UAAAA,QAAAA,IAAAA,QAAAA,MAAAA,QAAAA,cAAAA,EAhBR,IAAMC,EAAW,CAAC,EAAE,GAAI,GAAI,EAAE,EAAG,GAAI,CAAC,GAAI,IAgBlCD,QAAAA,SAAAA,EAdR,IAAME,EAAQD,EAASE,OAcfH,QAAAA,MAAAA,EAbR,IAAMI,EAAM,EAaJJ,QAAAA,IAAAA,EAFR,IAAMA,EAAYC,EAASI,OAEnBL,QAAAA,UAAAA,EAAAA,IAAAA,EAAAA,EAAAA,QAAAA,QAAAA;;ACtBfM,OAAOC,QAAQ;;ACAfD,OAAOC,QAAQ;;ACAfD,OAAOC,QAAQ;;ACAfD,OAAOC,QAAQ;;ACAfD,OAAOC,QAAQ;;ACqDX,aApDJ,IAAA,EAAA,EAAA,QAAA,SAGA,EAAA,QAAA,OAGA,EAAA,EAAA,QAAA,uBACA,EAAA,EAAA,QAAA,wBACA,EAAA,EAAA,QAAA,4BAEA,EAAA,EAAA,QAAA,uBACA,EAAA,EAAA,QAAA,oBAyCI,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAvCJ,IAsBIC,EAtBEC,GAAO,EAAb,EAAA,WAEMC,EAAqBD,EAAK,CAC5BE,KAAMF,EAAKG,KAAK,QAChBC,KAAMJ,EAAKG,KAAK,QAChBE,WAAY,CAAEC,SAAUf,EAAAA,WACxBgB,SAAU,CAENC,MAAOR,EAAKS,QAAQ,iBACpBC,OAAQV,EAAKS,QAAQ,mBAEzBhB,MAAAA,EAAAA,QAGEkB,EAAQ,CAAEC,MAAO,CAAC,EAAG,EAAG,EAAG,GAAIC,MAAO,EAAGC,QAAS,GAElDC,EAAU,CACZ,CAAEC,KAAM,SAAUd,KAAMe,EAAxB,QAAiCb,KAAMc,EAAAA,SACvC,CAAEF,KAAM,aAAcd,KAAMiB,EAA5B,QAAoCf,KAAMc,EAAAA,SAC1C,CAAEF,KAAM,QAASd,KAAAA,EAAjB,QAAuBE,KAAAA,EAAAA,UAK3B,SAASgB,EAAmB,GAALC,IAAAA,EAANC,EAAAA,KACbtB,EAAKuB,OACLvB,EAAKW,MAAMA,GAGLa,IAAAA,EAAIH,EAAEN,EAAQrB,OAEpBK,EAASgB,EAAQS,GACjBC,QAAQC,IAAcF,UAAAA,OAAAA,EAAOzB,OAAAA,OAAAA,EAAOiB,KAASjB,KAAAA,GAC7CE,EAAmBF,GAGvB,IAAM4B,EAAO,WAAM3B,OAAAA,EAAK2B,KAAKP,IAE7BQ,SAASC,iBAAiB,QAASF,GACnCA","file":"example.e87424c0.js","sourceRoot":"../example","sourcesContent":["/**\n * The 3 vertices of a 2D triangle covering the viewport in NDC coordinates ([-1, 1]).\n *\n * @export\n * @type {array.<array.<number>>}\n */\nexport const vertices = [[-1, -1], [-1, 4], [4, -1]];\n\nexport const count = vertices.length;\nexport const dim = 2;\n\n/**\n * The flat array of the above triangle, to be bound as a WebGL attribute buffer for\n * rendering the triangle in the vertex shader.\n * These positions will result in clipped NDC coordinates ([-1, 1]) over the\n * viewport's width and height.\n *\n * @export\n * @type {array.<number>}\n */\nexport const positions = vertices.flat();\n\nexport default positions;\n","module.exports=\"precision highp float;\\n#define GLSLIFY 1\\n\\nattribute vec2 position;\\n\\nvoid main() {\\n    gl_Position = vec4(position, 0, 1);\\n}\\n\";","module.exports=\"precision highp float;\\n#define GLSLIFY 1\\n\\nattribute vec2 position;\\n\\nvarying vec2 uv;\\n\\n// Flips the y-axis to point downwards.\\nconst vec2 flip = vec2(1, -1);\\n\\nvoid main() {\\n    uv = position*flip;\\n    gl_Position = vec4(position, 0, 1);\\n}\\n\";","module.exports=\"precision highp float;\\n#define GLSLIFY 1\\n\\nattribute vec2 position;\\n\\nvarying vec2 uv;\\n\\n// Translation for UV NDC to texture coordinates.\\nconst vec2 offset = vec2(0.5);\\n\\nvoid main() {\\n    uv = (position*0.5)+offset;\\n    gl_Position = vec4(position, 0, 1);\\n}\\n\";","module.exports=\"precision highp float;\\n#define GLSLIFY 1\\n\\nuniform float width;\\nuniform float height;\\n\\nvoid main() {\\n    gl_FragColor = vec4(0, gl_FragCoord.x/width, gl_FragCoord.y/height, 1);\\n}\\n\";","module.exports=\"precision highp float;\\n#define GLSLIFY 1\\n\\nvarying vec2 uv;\\n\\nvoid main() {\\n    gl_FragColor = vec4(uv, 0, 1);\\n}\\n\";","// Any rendering library, but made with `regl` in mind.\nimport getRegl from 'regl';\n\n// The position attributes.\nimport { positions, count } from '../';\n\n// The various shader examples.\nimport vert from '../index.vert.glsl';\nimport vertNDC from '../uv-ndc.vert.glsl';\nimport vertST from '../uv-texture.vert.glsl';\n\nimport frag from '../index.frag.glsl';\nimport fragUV from '../uv.frag.glsl';\n\nconst regl = getRegl();\n\nconst drawScreenTriangle = regl({\n    vert: regl.prop('vert'),\n    frag: regl.prop('frag'),\n    attributes: { position: positions },\n    uniforms: {\n        // These are only used for the `index.frag.glsl` shader.\n        width: regl.context('viewportWidth'),\n        height: regl.context('viewportHeight')\n    },\n    count\n});\n\nconst clear = { color: [0, 0, 0, 1], depth: 1, stencil: 0 };\n\nconst shaders = [\n    { name: 'uv-ndc', vert: vertNDC, frag: fragUV },\n    { name: 'uv-texture', vert: vertST, frag: fragUV },\n    { name: 'index', vert, frag }\n];\n\nlet shader;\n\nfunction frame({ tick: t }) {\n    regl.poll();\n    regl.clear(clear);\n\n    // Switch shader every frame.\n    const s = t%shaders.length;\n\n    shader = shaders[s];\n    console.log(`Shader ${s}: '${shader.name}'`, shader);\n    drawScreenTriangle(shader);\n}\n\nconst draw = () => regl.draw(frame);\n\ndocument.addEventListener('click', draw);\ndraw();\n"]}